ALTER TABLE campaigns DROP CONSTRAINT campaigns_prevent_double;
ALTER TABLE campaigns DROP CONSTRAINT campaigns_check_start_before_stop;
ALTER TABLE campaigns RENAME TO campaigns2;
CREATE TABLE IF NOT EXISTS campaigns (id SERIAL PRIMARY KEY, name TEXT NOT NULL, description TEXT, start TIMESTAMP NOT NULL DEFAULT NOW(), stop TIMESTAMP);
CREATE TABLE IF NOT EXISTS campaigns_servers (campaign_id INTEGER NOT NULL, server_name TEXT NOT NULL, PRIMARY KEY (campaign_id, server_name));
ALTER TABLE campaigns ADD CONSTRAINT campaigns_prevent_double EXCLUDE USING gist(tsrange(start, stop, '[)') WITH &&);
ALTER TABLE campaigns ADD CONSTRAINT campaigns_check_start_before_stop CHECK (start < stop);
CREATE UNIQUE INDEX IF NOT EXISTS idx_campaigns_name ON campaigns (name);
INSERT INTO campaigns (id, name, description, start, stop) SELECT DISTINCT MIN(id), name, MIN(description), MIN(start), MAX(stop) FROM campaigns2 GROUP BY name ON CONFLICT DO NOTHING;
INSERT INTO campaigns_servers (SELECT a.id, b.server_name FROM (SELECT MIN(id) AS id, name FROM campaigns2 GROUP BY name) AS a, (SELECT name, server_name FROM campaigns2) AS b WHERE a.name = b.name);
ALTER TABLE credits RENAME TO credits2;
CREATE TABLE IF NOT EXISTS credits (campaign_id INTEGER NOT NULL, player_ucid TEXT NOT NULL, points INTEGER NOT NULL DEFAULT 0, PRIMARY KEY(campaign_id, player_ucid));
INSERT INTO credits SELECT n.id, c.player_ucid, SUM(c.points) FROM credits2 c, campaigns n, campaigns2 o WHERE c.campaign_id = o.id AND n.name = o.name GROUP BY n.id, c.player_ucid;
CREATE TABLE credits_log2 AS SELECT * FROM credits_log;
DELETE FROM credits_log;
INSERT INTO credits_log SELECT l.id, cnew.id, l.event, l.player_ucid, l.old_points, l.new_points, l.remark, l.time FROM credits_log2 l, campaigns cnew, campaigns2 cold where cold.id = l.campaign_id and cold.name = cnew.name;
DROP TABLE credits_log2;
DROP TABLE credits2;
DROP TABLE campaigns2;
